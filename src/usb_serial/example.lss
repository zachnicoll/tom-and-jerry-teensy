
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000095e  000009f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  000009fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001752  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d49  00000000  00000000  0000229e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  00002fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087e  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef6  00000000  00000000  00004822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
   2:	00 00       	nop
   4:	92 c1       	rjmp	.+804    	; 0x32a <__bad_interrupt>
   6:	00 00       	nop
   8:	90 c1       	rjmp	.+800    	; 0x32a <__bad_interrupt>
   a:	00 00       	nop
   c:	8e c1       	rjmp	.+796    	; 0x32a <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c1       	rjmp	.+792    	; 0x32a <__bad_interrupt>
  12:	00 00       	nop
  14:	8a c1       	rjmp	.+788    	; 0x32a <__bad_interrupt>
  16:	00 00       	nop
  18:	88 c1       	rjmp	.+784    	; 0x32a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c1       	rjmp	.+780    	; 0x32a <__bad_interrupt>
  1e:	00 00       	nop
  20:	84 c1       	rjmp	.+776    	; 0x32a <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c1       	rjmp	.+772    	; 0x32a <__bad_interrupt>
  26:	00 00       	nop
  28:	17 c3       	rjmp	.+1582   	; 0x658 <__vector_10>
  2a:	00 00       	nop
  2c:	4f c3       	rjmp	.+1694   	; 0x6cc <__vector_11>
  2e:	00 00       	nop
  30:	7c c1       	rjmp	.+760    	; 0x32a <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c1       	rjmp	.+756    	; 0x32a <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c1       	rjmp	.+752    	; 0x32a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c1       	rjmp	.+748    	; 0x32a <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c1       	rjmp	.+744    	; 0x32a <__bad_interrupt>
  42:	00 00       	nop
  44:	72 c1       	rjmp	.+740    	; 0x32a <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c1       	rjmp	.+736    	; 0x32a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6e c1       	rjmp	.+732    	; 0x32a <__bad_interrupt>
  4e:	00 00       	nop
  50:	6c c1       	rjmp	.+728    	; 0x32a <__bad_interrupt>
  52:	00 00       	nop
  54:	6a c1       	rjmp	.+724    	; 0x32a <__bad_interrupt>
  56:	00 00       	nop
  58:	68 c1       	rjmp	.+720    	; 0x32a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	66 c1       	rjmp	.+716    	; 0x32a <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c1       	rjmp	.+712    	; 0x32a <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c1       	rjmp	.+708    	; 0x32a <__bad_interrupt>
  66:	00 00       	nop
  68:	60 c1       	rjmp	.+704    	; 0x32a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5e c1       	rjmp	.+700    	; 0x32a <__bad_interrupt>
  6e:	00 00       	nop
  70:	5c c1       	rjmp	.+696    	; 0x32a <__bad_interrupt>
  72:	00 00       	nop
  74:	5a c1       	rjmp	.+692    	; 0x32a <__bad_interrupt>
  76:	00 00       	nop
  78:	58 c1       	rjmp	.+688    	; 0x32a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	56 c1       	rjmp	.+684    	; 0x32a <__bad_interrupt>
  7e:	00 00       	nop
  80:	54 c1       	rjmp	.+680    	; 0x32a <__bad_interrupt>
  82:	00 00       	nop
  84:	52 c1       	rjmp	.+676    	; 0x32a <__bad_interrupt>
  86:	00 00       	nop
  88:	50 c1       	rjmp	.+672    	; 0x32a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4e c1       	rjmp	.+668    	; 0x32a <__bad_interrupt>
  8e:	00 00       	nop
  90:	4c c1       	rjmp	.+664    	; 0x32a <__bad_interrupt>
  92:	00 00       	nop
  94:	4a c1       	rjmp	.+660    	; 0x32a <__bad_interrupt>
  96:	00 00       	nop
  98:	48 c1       	rjmp	.+656    	; 0x32a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	46 c1       	rjmp	.+652    	; 0x32a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	44 c1       	rjmp	.+648    	; 0x32a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	42 c1       	rjmp	.+644    	; 0x32a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	40 c1       	rjmp	.+640    	; 0x32a <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	22 2c       	mov	r2, r2
  ae:	20 6d       	ori	r18, 0xD0	; 208
  b0:	75 73       	andi	r23, 0x35	; 53
  b2:	74 20       	and	r7, r4
  b4:	62 65       	ori	r22, 0x52	; 82
  b6:	20 3f       	cpi	r18, 0xF0	; 240
  b8:	20 6f       	ori	r18, 0xF0	; 240
  ba:	72 20       	and	r7, r2
  bc:	3d 0d       	add	r19, r13
  be:	0a 00       	.word	0x000a	; ????

000000c0 <__c.1987>:
  c0:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
  d0:	22 00                                               ".

000000d2 <__c.1985>:
  d2:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
  e2:	31 0d 0a 00                                         1...

000000e6 <__c.1983>:
  e6:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

000000f6 <__c.1981>:
  f6:	0d 0a 00                                            ...

000000f9 <__c.1979>:
  f9:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
 109:	37 0d 0a 00                                         7...

0000010d <__c.1977>:
 10d:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000011b <__c.1975>:
 11b:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
 12b:	0d 0a 00                                            ...

0000012e <__c.1973>:
 12e:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

0000013d <__c.1971>:
 13d:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
 14d:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
 15d:	20 72 65 71 27 64 0d 0a 00                           req'd...

00000166 <__c.1942>:
 166:	0d 0a 00                                            ...

00000169 <__c.1939>:
 169:	3e 20 00                                            > .

0000016c <__c.1937>:
 16c:	0d 0a 54 65 65 6e 73 79 20 55 53 42 20 53 65 72     ..Teensy USB Ser
 17c:	69 61 6c 20 45 78 61 6d 70 6c 65 2c 20 53 69 6d     ial Example, Sim
 18c:	70 6c 65 20 50 69 6e 20 43 6f 6e 74 72 6f 6c 20     ple Pin Control 
 19c:	53 68 65 6c 6c 0d 0a 0d 0a 45 78 61 6d 70 6c 65     Shell....Example
 1ac:	20 43 6f 6d 6d 61 6e 64 73 0d 0a 20 20 42 30 3f      Commands..  B0?
 1bc:	20 20 20 52 65 61 64 20 50 6f 72 74 20 42 2c 20        Read Port B, 
 1cc:	70 69 6e 20 30 0d 0a 20 20 43 32 3d 30 20 20 57     pin 0..  C2=0  W
 1dc:	72 69 74 65 20 50 6f 72 74 20 43 2c 20 70 69 6e     rite Port C, pin
 1ec:	20 31 20 4c 4f 57 0d 0a 20 20 44 36 3d 31 20 20      1 LOW..  D6=1  
 1fc:	57 72 69 74 65 20 50 6f 72 74 20 44 2c 20 70 69     Write Port D, pi
 20c:	6e 20 36 20 48 49 47 48 20 20 28 44 36 20 69 73     n 6 HIGH  (D6 is
 21c:	20 4c 45 44 20 70 69 6e 29 0d 0a 0d 0a 00            LED pin).....

0000022a <descriptor_list>:
 22a:	00 01 00 00 d7 02 12 00 02 00 00 94 02 43 00 03     .............C..
 23a:	00 00 90 02 04 01 03 09 04 7a 02 14 02 03 09 04     .........z......
 24a:	62 02 16 03 03 09 04 54 02 0c                       b......T..

00000254 <string3>:
 254:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000262 <string2>:
 262:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 272:	69 00 61 00 6c 00 00 00                             i.a.l...

0000027a <string1>:
 27a:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 28a:	6d 00 65 00 00 00                                   m.e...

00000290 <string0>:
 290:	04 03 09 04                                         ....

00000294 <config1_descriptor>:
 294:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 2a4:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 2b4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 2c4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 2d4:	40 00 00                                            @..

000002d7 <device_descriptor>:
 2d7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 2e7:	03 01                                               ..

000002e9 <endpoint_config_table>:
 2e9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000002f4 <__ctors_end>:
 2f4:	11 24       	eor	r1, r1
 2f6:	1f be       	out	0x3f, r1	; 63
 2f8:	cf ef       	ldi	r28, 0xFF	; 255
 2fa:	da e0       	ldi	r29, 0x0A	; 10
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	a0 e0       	ldi	r26, 0x00	; 0
 304:	b1 e0       	ldi	r27, 0x01	; 1
 306:	ee e5       	ldi	r30, 0x5E	; 94
 308:	f9 e0       	ldi	r31, 0x09	; 9
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__do_copy_data+0x10>
 30c:	05 90       	lpm	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	a8 30       	cpi	r26, 0x08	; 8
 312:	b1 07       	cpc	r27, r17
 314:	d9 f7       	brne	.-10     	; 0x30c <__do_copy_data+0xc>

00000316 <__do_clear_bss>:
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	a8 e0       	ldi	r26, 0x08	; 8
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
 31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
 320:	ac 30       	cpi	r26, 0x0C	; 12
 322:	b2 07       	cpc	r27, r18
 324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>
 326:	c8 d0       	rcall	.+400    	; 0x4b8 <main>
 328:	18 c3       	rjmp	.+1584   	; 0x95a <_exit>

0000032a <__bad_interrupt>:
 32a:	6a ce       	rjmp	.-812    	; 0x0 <__vectors>

0000032c <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	fc 01       	movw	r30, r24
	char c;
	while (1) {
		c = pgm_read_byte(s++);
 332:	84 91       	lpm	r24, Z
 334:	ef 01       	movw	r28, r30
 336:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <send_str+0x16>
		usb_serial_putchar(c);
 33c:	4b d1       	rcall	.+662    	; 0x5d4 <usb_serial_putchar>
 33e:	fe 01       	movw	r30, r28
	}
 340:	f8 cf       	rjmp	.-16     	; 0x332 <send_str+0x6>
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	8c 01       	movw	r16, r24
 356:	d6 2f       	mov	r29, r22
	int16_t r;
	uint8_t count=0;
 358:	c0 e0       	ldi	r28, 0x00	; 0

	while (count < size) {
 35a:	cd 17       	cp	r28, r29
 35c:	20 f5       	brcc	.+72     	; 0x3a6 <recv_str+0x5e>
		r = usb_serial_getchar();
 35e:	04 d1       	rcall	.+520    	; 0x568 <usb_serial_getchar>
		if (r != -1) {
 360:	8f 3f       	cpi	r24, 0xFF	; 255
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	92 07       	cpc	r25, r18
 366:	b1 f0       	breq	.+44     	; 0x394 <recv_str+0x4c>
			if (r == '\r' || r == '\n') return count;
 368:	8d 30       	cpi	r24, 0x0D	; 13
 36a:	91 05       	cpc	r25, r1
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <recv_str+0x5e>
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	91 05       	cpc	r25, r1
 372:	c9 f0       	breq	.+50     	; 0x3a6 <recv_str+0x5e>
			if (r >= ' ' && r <= '~') {
 374:	9c 01       	movw	r18, r24
 376:	20 52       	subi	r18, 0x20	; 32
 378:	31 09       	sbc	r19, r1
 37a:	2f 35       	cpi	r18, 0x5F	; 95
 37c:	31 05       	cpc	r19, r1
 37e:	68 f7       	brcc	.-38     	; 0x35a <recv_str+0x12>
				*buf++ = r;
 380:	78 01       	movw	r14, r16
 382:	ef ef       	ldi	r30, 0xFF	; 255
 384:	ee 1a       	sub	r14, r30
 386:	fe 0a       	sbc	r15, r30
 388:	f8 01       	movw	r30, r16
				usb_serial_putchar(r);
 38a:	80 83       	st	Z, r24
 38c:	23 d1       	rcall	.+582    	; 0x5d4 <usb_serial_putchar>
				count++;
 38e:	cf 5f       	subi	r28, 0xFF	; 255
	while (count < size) {
		r = usb_serial_getchar();
		if (r != -1) {
			if (r == '\r' || r == '\n') return count;
			if (r >= ' ' && r <= '~') {
				*buf++ = r;
 390:	87 01       	movw	r16, r14
				usb_serial_putchar(r);
				count++;
			}
		} else {
			if (!usb_configured() ||
 392:	e3 cf       	rjmp	.-58     	; 0x35a <recv_str+0x12>
 394:	e6 d0       	rcall	.+460    	; 0x562 <usb_configured>
 396:	81 11       	cpse	r24, r1
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
				// user no longer connected
				return 255;
 398:	02 c0       	rjmp	.+4      	; 0x39e <recv_str+0x56>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
				usb_serial_putchar(r);
				count++;
			}
		} else {
			if (!usb_configured() ||
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <recv_str+0x60>
 39e:	59 d1       	rcall	.+690    	; 0x652 <usb_serial_get_control>
				*buf++ = r;
				usb_serial_putchar(r);
				count++;
			}
		} else {
			if (!usb_configured() ||
 3a0:	80 fd       	sbrc	r24, 0
 3a2:	db cf       	rjmp	.-74     	; 0x35a <recv_str+0x12>
 3a4:	fa cf       	rjmp	.-12     	; 0x39a <recv_str+0x52>
 3a6:	8c 2f       	mov	r24, r28
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret

000003b6 <parse_and_execute_command>:

// parse a user command and execute it, or print an error message
//
void parse_and_execute_command(const char *buf, uint8_t num)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
	uint8_t port, pin, val;

	if (num < 3) {
 3ba:	63 30       	cpi	r22, 0x03	; 3
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <parse_and_execute_command+0xe>
		send_str(PSTR("unrecognized format, 3 chars min req'd\r\n"));
 3be:	8d e3       	ldi	r24, 0x3D	; 61
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	77 c0       	rjmp	.+238    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 3c4:	ec 01       	movw	r28, r24
		return;
	}
	// first character is the port letter
	if (buf[0] >= 'A' && buf[0] <= 'F') {
 3c6:	88 81       	ld	r24, Y
 3c8:	ef eb       	ldi	r30, 0xBF	; 191
 3ca:	e8 0f       	add	r30, r24
 3cc:	e6 30       	cpi	r30, 0x06	; 6
 3ce:	60 f0       	brcs	.+24     	; 0x3e8 <parse_and_execute_command+0x32>
		port = buf[0] - 'A';
	} else if (buf[0] >= 'a' && buf[0] <= 'f') {
 3d0:	ef e9       	ldi	r30, 0x9F	; 159
 3d2:	e8 0f       	add	r30, r24
 3d4:	e6 30       	cpi	r30, 0x06	; 6
 3d6:	40 f0       	brcs	.+16     	; 0x3e8 <parse_and_execute_command+0x32>
		port = buf[0] - 'a';
	} else {
		send_str(PSTR("Unknown port \""));
 3d8:	8e e2       	ldi	r24, 0x2E	; 46
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	a7 df       	rcall	.-178    	; 0x32c <send_str>
		usb_serial_putchar(buf[0]);
 3de:	88 81       	ld	r24, Y
 3e0:	f9 d0       	rcall	.+498    	; 0x5d4 <usb_serial_putchar>
		send_str(PSTR("\", must be A - F\r\n"));
 3e2:	8b e1       	ldi	r24, 0x1B	; 27
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	65 c0       	rjmp	.+202    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		return;
	}
	// second character is the pin number
	if (buf[1] >= '0' && buf[1] <= '7') {
 3e8:	29 81       	ldd	r18, Y+1	; 0x01
 3ea:	20 53       	subi	r18, 0x30	; 48
 3ec:	28 30       	cpi	r18, 0x08	; 8
 3ee:	20 f4       	brcc	.+8      	; 0x3f8 <parse_and_execute_command+0x42>
		usb_serial_putchar(buf[0]);
		send_str(PSTR("\", must be 0 to 7\r\n"));
		return;
	}
	// if the third character is a question mark, read the pin
	if (buf[2] == '?') {
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	8f 33       	cpi	r24, 0x3F	; 63
 3f4:	11 f5       	brne	.+68     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}
	// second character is the pin number
	if (buf[1] >= '0' && buf[1] <= '7') {
		pin = buf[1] - '0';
	} else {
		send_str(PSTR("Unknown pin \""));
 3f8:	8d e0       	ldi	r24, 0x0D	; 13
 3fa:	91 e0       	ldi	r25, 0x01	; 1
		usb_serial_putchar(buf[0]);
 3fc:	97 df       	rcall	.-210    	; 0x32c <send_str>
 3fe:	88 81       	ld	r24, Y
 400:	e9 d0       	rcall	.+466    	; 0x5d4 <usb_serial_putchar>
		send_str(PSTR("\", must be 0 to 7\r\n"));
 402:	89 ef       	ldi	r24, 0xF9	; 249
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	55 c0       	rjmp	.+170    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		return;
	}
	// if the third character is a question mark, read the pin
	if (buf[2] == '?') {
		// make the pin an input
		*(uint8_t *)(0x21 + port * 3) &= ~(1 << pin);
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	e8 9f       	mul	r30, r24
 40c:	f0 01       	movw	r30, r0
 40e:	11 24       	eor	r1, r1
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	88 0f       	add	r24, r24
 418:	2a 95       	dec	r18
 41a:	ea f7       	brpl	.-6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41c:	98 2f       	mov	r25, r24
 41e:	90 95       	com	r25
 420:	21 a1       	ldd	r18, Z+33	; 0x21
 422:	92 23       	and	r25, r18
 424:	91 a3       	std	Z+33, r25	; 0x21
		// read the pin
		val = *(uint8_t *)(0x20 + port * 3) & (1 << pin);
		usb_serial_putchar(val ? '1' : '0');
 426:	90 a1       	ldd	r25, Z+32	; 0x20
 428:	89 23       	and	r24, r25
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	80 e3       	ldi	r24, 0x30	; 48
 42e:	01 c0       	rjmp	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	81 e3       	ldi	r24, 0x31	; 49
 432:	d0 d0       	rcall	.+416    	; 0x5d4 <usb_serial_putchar>
		send_str(PSTR("\r\n"));
 434:	86 ef       	ldi	r24, 0xF6	; 246
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	3c c0       	rjmp	.+120    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		return;
	}
	// if the third character is an equals sign, write the pin
	if (num >= 4 && buf[2] == '=') {
 43a:	63 30       	cpi	r22, 0x03	; 3
 43c:	99 f1       	breq	.+102    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 43e:	8d 33       	cpi	r24, 0x3D	; 61
 440:	89 f5       	brne	.+98     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		if (buf[3] == '0') {
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	80 33       	cpi	r24, 0x30	; 48
 446:	89 f4       	brne	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			// make the pin an output
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	e8 9f       	mul	r30, r24
 44c:	f0 01       	movw	r30, r0
 44e:	11 24       	eor	r1, r1
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	01 c0       	rjmp	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	88 0f       	add	r24, r24
 458:	2a 95       	dec	r18
 45a:	ea f7       	brpl	.-6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45c:	91 a1       	ldd	r25, Z+33	; 0x21
 45e:	98 2b       	or	r25, r24
 460:	91 a3       	std	Z+33, r25	; 0x21
			// drive it low
			*(uint8_t *)(0x22 + port * 3) &= ~(1 << pin);
 462:	80 95       	com	r24
 464:	92 a1       	ldd	r25, Z+34	; 0x22
 466:	89 23       	and	r24, r25
 468:	11 c0       	rjmp	.+34     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			return;
		} else if (buf[3] == '1') {
 46a:	81 33       	cpi	r24, 0x31	; 49
 46c:	99 f4       	brne	.+38     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			// make the pin an output
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	e8 9f       	mul	r30, r24
 472:	f0 01       	movw	r30, r0
 474:	11 24       	eor	r1, r1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	88 0f       	add	r24, r24
 47e:	2a 95       	dec	r18
 480:	ea f7       	brpl	.-6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 482:	91 a1       	ldd	r25, Z+33	; 0x21
 484:	98 2b       	or	r25, r24
 486:	91 a3       	std	Z+33, r25	; 0x21
			// drive it high
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 488:	92 a1       	ldd	r25, Z+34	; 0x22
 48a:	89 2b       	or	r24, r25
 48c:	82 a3       	std	Z+34, r24	; 0x22
	}
	// otherwise, error message
	send_str(PSTR("Unknown command \""));
	usb_serial_putchar(buf[0]);
	send_str(PSTR("\", must be ? or =\r\n"));
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
			// drive it high
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
			return;
		} else {
			send_str(PSTR("Unknown value \""));
 492:	08 95       	ret
 494:	86 ee       	ldi	r24, 0xE6	; 230
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	49 df       	rcall	.-366    	; 0x32c <send_str>
			usb_serial_putchar(buf[3]);
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	9b d0       	rcall	.+310    	; 0x5d4 <usb_serial_putchar>
			send_str(PSTR("\", must be 0 or 1\r\n"));
 49e:	82 ed       	ldi	r24, 0xD2	; 210
 4a0:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
	}
	// otherwise, error message
	send_str(PSTR("Unknown command \""));
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	90 e0       	ldi	r25, 0x00	; 0
	usb_serial_putchar(buf[0]);
 4a8:	41 df       	rcall	.-382    	; 0x32c <send_str>
 4aa:	88 81       	ld	r24, Y
 4ac:	93 d0       	rcall	.+294    	; 0x5d4 <usb_serial_putchar>
	send_str(PSTR("\", must be ? or =\r\n"));
 4ae:	8c ea       	ldi	r24, 0xAC	; 172
 4b0:	90 e0       	ldi	r25, 0x00	; 0
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
		}
	}
	// otherwise, error message
	send_str(PSTR("Unknown command \""));
	usb_serial_putchar(buf[0]);
	send_str(PSTR("\", must be ? or =\r\n"));
 4b6:	3a cf       	rjmp	.-396    	; 0x32c <send_str>

000004b8 <main>:
 4b8:	cf 93       	push	r28

#else

// Basic command interpreter for controlling port pins
int main(void)
{
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	a0 97       	sbiw	r28, 0x20	; 32
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	// set for 16 MHz clock, and turn on the LED
	CPU_PRESCALE(0);
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	LED_CONFIG;
 4d6:	56 9a       	sbi	0x0a, 6	; 10
	LED_ON;
 4d8:	5e 9a       	sbi	0x0b, 6	; 11

	// initialize the USB, and then wait for the host
	// to set configuration.  If the Teensy is powered
	// without a PC connected to the USB port, this 
	// will wait forever.
	usb_init();
 4da:	2a d0       	rcall	.+84     	; 0x530 <usb_init>
	while (!usb_configured()) /* wait */ ;
 4dc:	42 d0       	rcall	.+132    	; 0x562 <usb_configured>
 4de:	88 23       	and	r24, r24
 4e0:	e9 f3       	breq	.-6      	; 0x4dc <main+0x24>
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e4:	83 ed       	ldi	r24, 0xD3	; 211
 4e6:	90 e3       	ldi	r25, 0x30	; 48
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x30>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x3a>
 4f2:	00 00       	nop
	_delay_ms(1000);

	while (1) {
		// wait for the user to run their terminal emulator program
		// which sets DTR to indicate it is ready to receive.
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
 4f4:	ae d0       	rcall	.+348    	; 0x652 <usb_serial_get_control>
 4f6:	80 ff       	sbrs	r24, 0
 4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <main+0x3c>

		// discard anything that was received prior.  Sometimes the
		// operating system or other software will send a modem
		// "AT command", which can still be buffered.
		usb_serial_flush_input();
 4fa:	59 d0       	rcall	.+178    	; 0x5ae <usb_serial_flush_input>

		// print a nice welcome message
		send_str(PSTR("\r\nTeensy USB Serial Example, "
 4fc:	8c e6       	ldi	r24, 0x6C	; 108
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	15 df       	rcall	.-470    	; 0x32c <send_str>
			"  C2=0  Write Port C, pin 1 LOW\r\n"
			"  D6=1  Write Port D, pin 6 HIGH  (D6 is LED pin)\r\n\r\n"));

		// and then listen for commands and process them
		while (1) {
			send_str(PSTR("> "));
 502:	89 e6       	ldi	r24, 0x69	; 105
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	12 df       	rcall	.-476    	; 0x32c <send_str>
			n = recv_str(buf, sizeof(buf));
 508:	60 e2       	ldi	r22, 0x20	; 32
 50a:	ce 01       	movw	r24, r28
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	1c df       	rcall	.-456    	; 0x348 <recv_str>
 510:	18 2f       	mov	r17, r24
			if (n == 255) break;
 512:	8f 3f       	cpi	r24, 0xFF	; 255
			send_str(PSTR("\r\n"));
 514:	79 f3       	breq	.-34     	; 0x4f4 <main+0x3c>
 516:	86 e6       	ldi	r24, 0x66	; 102
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	08 df       	rcall	.-496    	; 0x32c <send_str>
			parse_and_execute_command(buf, n);
 51c:	61 2f       	mov	r22, r17
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	49 df       	rcall	.-366    	; 0x3b6 <parse_and_execute_command>
 524:	ee cf       	rjmp	.-36     	; 0x502 <main+0x4a>

00000526 <usb_wait_in_ready>:
		}
 526:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	UEDATX = 0;
	UEDATX = signals;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
 52a:	80 ff       	sbrs	r24, 0
 52c:	fc cf       	rjmp	.-8      	; 0x526 <usb_wait_in_ready>
 52e:	08 95       	ret

00000530 <usb_init>:
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 536:	80 ea       	ldi	r24, 0xA0	; 160
 538:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 53c:	82 e1       	ldi	r24, 0x12	; 18
 53e:	89 bd       	out	0x29, r24	; 41
 540:	09 b4       	in	r0, 0x29	; 41
 542:	00 fe       	sbrs	r0, 0
 544:	fd cf       	rjmp	.-6      	; 0x540 <usb_init+0x10>
 546:	80 e9       	ldi	r24, 0x90	; 144
 548:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 54c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 550:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
 554:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 558:	8c e0       	ldi	r24, 0x0C	; 12
 55a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 55e:	78 94       	sei
 560:	08 95       	ret

00000562 <usb_configured>:
 562:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 566:	08 95       	ret

00000568 <usb_serial_getchar>:
 568:	9f b7       	in	r25, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 570:	88 23       	and	r24, r24
 572:	69 f0       	breq	.+26     	; 0x58e <usb_serial_getchar+0x26>
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 57a:	2b e6       	ldi	r18, 0x6B	; 107
 57c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 580:	85 fd       	sbrc	r24, 5
 582:	09 c0       	rjmp	.+18     	; 0x596 <usb_serial_getchar+0x2e>
 584:	82 ff       	sbrs	r24, 2
 586:	03 c0       	rjmp	.+6      	; 0x58e <usb_serial_getchar+0x26>
 588:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 58c:	f7 cf       	rjmp	.-18     	; 0x57c <usb_serial_getchar+0x14>
 58e:	9f bf       	out	0x3f, r25	; 63
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	9f ef       	ldi	r25, 0xFF	; 255
 594:	08 95       	ret
 596:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 59a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 59e:	25 fd       	sbrc	r18, 5
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <usb_serial_getchar+0x40>
 5a2:	2b e6       	ldi	r18, 0x6B	; 107
 5a4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a8:	9f bf       	out	0x3f, r25	; 63
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	08 95       	ret

000005ae <usb_serial_flush_input>:
 5ae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 5b2:	88 23       	and	r24, r24
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <usb_serial_flush_input+0x24>
 5b6:	8f b7       	in	r24, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	93 e0       	ldi	r25, 0x03	; 3
 5bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 5c0:	2b e6       	ldi	r18, 0x6B	; 107
 5c2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c6:	95 ff       	sbrs	r25, 5
 5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <usb_serial_flush_input+0x22>
 5ca:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ce:	f9 cf       	rjmp	.-14     	; 0x5c2 <usb_serial_flush_input+0x14>
 5d0:	8f bf       	out	0x3f, r24	; 63
 5d2:	08 95       	ret

000005d4 <usb_serial_putchar>:
 5d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 5d8:	99 23       	and	r25, r25
 5da:	71 f0       	breq	.+28     	; 0x5f8 <usb_serial_putchar+0x24>
 5dc:	9f b7       	in	r25, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	24 e0       	ldi	r18, 0x04	; 4
 5e2:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 5e6:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
 5ea:	22 23       	and	r18, r18
 5ec:	49 f0       	breq	.+18     	; 0x600 <usb_serial_putchar+0x2c>
 5ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5f2:	25 fd       	sbrc	r18, 5
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <usb_serial_putchar+0x28>
 5f6:	9f bf       	out	0x3f, r25	; 63
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	08 95       	ret
 5fc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
 600:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 604:	27 5e       	subi	r18, 0xE7	; 231
 606:	34 e0       	ldi	r19, 0x04	; 4
 608:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 60c:	45 fd       	sbrc	r20, 5
 60e:	12 c0       	rjmp	.+36     	; 0x634 <usb_serial_putchar+0x60>
 610:	9f bf       	out	0x3f, r25	; 63
 612:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 616:	29 13       	cpse	r18, r25
 618:	04 c0       	rjmp	.+8      	; 0x622 <usb_serial_putchar+0x4e>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
 620:	eb cf       	rjmp	.-42     	; 0x5f8 <usb_serial_putchar+0x24>
 622:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 626:	99 23       	and	r25, r25
 628:	39 f3       	breq	.-50     	; 0x5f8 <usb_serial_putchar+0x24>
 62a:	9f b7       	in	r25, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 632:	ea cf       	rjmp	.-44     	; 0x608 <usb_serial_putchar+0x34>
 634:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63c:	85 fd       	sbrc	r24, 5
 63e:	03 c0       	rjmp	.+6      	; 0x646 <usb_serial_putchar+0x72>
 640:	8a e3       	ldi	r24, 0x3A	; 58
 642:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
 64c:	9f bf       	out	0x3f, r25	; 63
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret

00000652 <usb_serial_get_control>:
 652:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 656:	08 95       	ret

00000658 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 666:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 66a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 66e:	83 ff       	sbrs	r24, 3
 670:	11 c0       	rjmp	.+34     	; 0x694 <__vector_10+0x3c>
		UENUM = 0;
 672:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 67c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 680:	92 e1       	ldi	r25, 0x12	; 18
 682:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 686:	98 e0       	ldi	r25, 0x08	; 8
 688:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 68c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
		cdc_line_rtsdtr = 0;
 690:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
        }
	if (intbits & (1<<SOFI)) {
 694:	82 ff       	sbrs	r24, 2
 696:	13 c0       	rjmp	.+38     	; 0x6be <__vector_10+0x66>
		if (usb_configuration) {
 698:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 69c:	88 23       	and	r24, r24
 69e:	79 f0       	breq	.+30     	; 0x6be <__vector_10+0x66>
			t = transmit_flush_timer;
 6a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
			if (t) {
 6a4:	88 23       	and	r24, r24
 6a6:	59 f0       	breq	.+22     	; 0x6be <__vector_10+0x66>
				transmit_flush_timer = --t;
 6a8:	81 50       	subi	r24, 0x01	; 1
 6aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
				if (!t) {
 6ae:	81 11       	cpse	r24, r1
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <__vector_10+0x66>
					UENUM = CDC_TX_ENDPOINT;
 6b2:	84 e0       	ldi	r24, 0x04	; 4
 6b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 6b8:	8a e3       	ldi	r24, 0x3A	; 58
 6ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	ef 93       	push	r30
 6f6:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 6f8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 6fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 700:	83 ff       	sbrs	r24, 3
 702:	12 c1       	rjmp	.+548    	; 0x928 <__vector_11+0x25c>
                bmRequestType = UEDATX;
 704:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 708:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 70c:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 710:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 714:	10 e0       	ldi	r17, 0x00	; 0
 716:	19 2b       	or	r17, r25
                wIndex = UEDATX;
 718:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 71c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 720:	d0 e0       	ldi	r29, 0x00	; 0
 722:	d9 2b       	or	r29, r25
                wLength = UEDATX;
 724:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 728:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 72c:	92 ef       	ldi	r25, 0xF2	; 242
 72e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 732:	86 30       	cpi	r24, 0x06	; 6
 734:	09 f0       	breq	.+2      	; 0x738 <__vector_11+0x6c>
 736:	49 c0       	rjmp	.+146    	; 0x7ca <__vector_11+0xfe>
 738:	8a e2       	ldi	r24, 0x2A	; 42
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	44 e5       	ldi	r20, 0x54	; 84
 73e:	52 e0       	ldi	r21, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 740:	fc 01       	movw	r30, r24
 742:	a5 91       	lpm	r26, Z+
 744:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 746:	0a 17       	cp	r16, r26
 748:	1b 07       	cpc	r17, r27
 74a:	d9 f4       	brne	.+54     	; 0x782 <__vector_11+0xb6>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 74c:	fc 01       	movw	r30, r24
 74e:	32 96       	adiw	r30, 0x02	; 2
 750:	a5 91       	lpm	r26, Z+
 752:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 754:	ca 17       	cp	r28, r26
 756:	db 07       	cpc	r29, r27
 758:	a1 f4       	brne	.+40     	; 0x782 <__vector_11+0xb6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 75a:	fc 01       	movw	r30, r24
 75c:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 75e:	45 91       	lpm	r20, Z+
 760:	54 91       	lpm	r21, Z
				list += 2;
 762:	fc 01       	movw	r30, r24
 764:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 766:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	36 2b       	or	r19, r22
 76c:	2f 3f       	cpi	r18, 0xFF	; 255
 76e:	31 05       	cpc	r19, r1
 770:	19 f0       	breq	.+6      	; 0x778 <__vector_11+0xac>
 772:	10 f0       	brcs	.+4      	; 0x778 <__vector_11+0xac>
 774:	2f ef       	ldi	r18, 0xFF	; 255
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	28 17       	cp	r18, r24
 77a:	08 f4       	brcc	.+2      	; 0x77e <__vector_11+0xb2>
 77c:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 77e:	3e ef       	ldi	r19, 0xFE	; 254
 780:	0c c0       	rjmp	.+24     	; 0x79a <__vector_11+0xce>
 782:	07 96       	adiw	r24, 0x07	; 7
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 784:	48 17       	cp	r20, r24
 786:	59 07       	cpc	r21, r25
 788:	d9 f6       	brne	.-74     	; 0x740 <__vector_11+0x74>
 78a:	ce c0       	rjmp	.+412    	; 0x928 <__vector_11+0x25c>
 78c:	49 0f       	add	r20, r25
 78e:	51 1d       	adc	r21, r1
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 790:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 792:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 796:	88 23       	and	r24, r24
 798:	a9 f0       	breq	.+42     	; 0x7c4 <__vector_11+0xf8>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 79a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 79e:	29 2f       	mov	r18, r25
 7a0:	25 70       	andi	r18, 0x05	; 5
 7a2:	d9 f3       	breq	.-10     	; 0x79a <__vector_11+0xce>
				if (i & (1<<RXOUTI)) return;	// abort
 7a4:	92 fd       	sbrc	r25, 2
 7a6:	c3 c0       	rjmp	.+390    	; 0x92e <__vector_11+0x262>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7a8:	98 2f       	mov	r25, r24
 7aa:	81 31       	cpi	r24, 0x11	; 17
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <__vector_11+0xe4>
 7ae:	90 e1       	ldi	r25, 0x10	; 16
				for (i = n; i; i--) {
 7b0:	fa 01       	movw	r30, r20
 7b2:	29 2f       	mov	r18, r25
 7b4:	22 23       	and	r18, r18
 7b6:	51 f3       	breq	.-44     	; 0x78c <__vector_11+0xc0>
					UEDATX = pgm_read_byte(desc_addr++);
 7b8:	64 91       	lpm	r22, Z
 7ba:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 7be:	21 50       	subi	r18, 0x01	; 1
 7c0:	31 96       	adiw	r30, 0x01	; 1
 7c2:	f8 cf       	rjmp	.-16     	; 0x7b4 <__vector_11+0xe8>
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7c4:	90 31       	cpi	r25, 0x10	; 16
 7c6:	49 f3       	breq	.-46     	; 0x79a <__vector_11+0xce>
 7c8:	b2 c0       	rjmp	.+356    	; 0x92e <__vector_11+0x262>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 7ca:	85 30       	cpi	r24, 0x05	; 5
 7cc:	41 f4       	brne	.+16     	; 0x7de <__vector_11+0x112>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7ce:	8e ef       	ldi	r24, 0xFE	; 254
 7d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 7d4:	a8 de       	rcall	.-688    	; 0x526 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 7d6:	00 68       	ori	r16, 0x80	; 128
 7d8:	00 93 e3 00 	sts	0x00E3, r16	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 7dc:	a8 c0       	rjmp	.+336    	; 0x92e <__vector_11+0x262>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 7de:	89 30       	cpi	r24, 0x09	; 9
 7e0:	59 f5       	brne	.+86     	; 0x838 <__vector_11+0x16c>
 7e2:	f1 10       	cpse	r15, r1
 7e4:	a1 c0       	rjmp	.+322    	; 0x928 <__vector_11+0x25c>
			usb_configuration = wValue;
 7e6:	00 93 0b 01 	sts	0x010B, r16	; 0x80010b <usb_configuration>
			cdc_line_rtsdtr = 0;
 7ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			transmit_flush_timer = 0;
 7ee:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7f2:	8e ef       	ldi	r24, 0xFE	; 254
 7f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 7f8:	41 e0       	ldi	r20, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 7fa:	89 ee       	ldi	r24, 0xE9	; 233
 7fc:	92 e0       	ldi	r25, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
 7fe:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 802:	9c 01       	movw	r18, r24
 804:	2f 5f       	subi	r18, 0xFF	; 255
 806:	3f 4f       	sbci	r19, 0xFF	; 255
 808:	fc 01       	movw	r30, r24
 80a:	54 91       	lpm	r21, Z
				UECONX = en;
 80c:	50 93 eb 00 	sts	0x00EB, r21	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 810:	55 23       	and	r21, r21
 812:	59 f0       	breq	.+22     	; 0x82a <__vector_11+0x15e>
					UECFG0X = pgm_read_byte(cfg++);
 814:	f9 01       	movw	r30, r18
 816:	24 91       	lpm	r18, Z
 818:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 81c:	9c 01       	movw	r18, r24
 81e:	2d 5f       	subi	r18, 0xFD	; 253
 820:	3f 4f       	sbci	r19, 0xFF	; 255
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
				UECONX = en;
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 822:	31 96       	adiw	r30, 0x01	; 1
					UECFG1X = pgm_read_byte(cfg++);
 824:	e4 91       	lpm	r30, Z
 826:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 82a:	4f 5f       	subi	r20, 0xFF	; 255
 82c:	45 30       	cpi	r20, 0x05	; 5
 82e:	11 f0       	breq	.+4      	; 0x834 <__vector_11+0x168>
 830:	c9 01       	movw	r24, r18
 832:	e5 cf       	rjmp	.-54     	; 0x7fe <__vector_11+0x132>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 834:	8e e1       	ldi	r24, 0x1E	; 30
 836:	73 c0       	rjmp	.+230    	; 0x91e <__vector_11+0x252>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 838:	88 30       	cpi	r24, 0x08	; 8
 83a:	49 f4       	brne	.+18     	; 0x84e <__vector_11+0x182>
 83c:	f0 e8       	ldi	r31, 0x80	; 128
 83e:	ff 12       	cpse	r15, r31
			usb_wait_in_ready();
 840:	73 c0       	rjmp	.+230    	; 0x928 <__vector_11+0x25c>
 842:	71 de       	rcall	.-798    	; 0x526 <usb_wait_in_ready>
			UEDATX = usb_configuration;
 844:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 848:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 84c:	46 c0       	rjmp	.+140    	; 0x8da <__vector_11+0x20e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 84e:	81 32       	cpi	r24, 0x21	; 33
 850:	79 f4       	brne	.+30     	; 0x870 <__vector_11+0x1a4>
 852:	81 ea       	ldi	r24, 0xA1	; 161
 854:	f8 12       	cpse	r15, r24
			usb_wait_in_ready();
 856:	68 c0       	rjmp	.+208    	; 0x928 <__vector_11+0x25c>
 858:	66 de       	rcall	.-820    	; 0x526 <usb_wait_in_ready>
 85a:	e0 e0       	ldi	r30, 0x00	; 0
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	87 e0       	ldi	r24, 0x07	; 7
 860:	91 e0       	ldi	r25, 0x01	; 1
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 862:	21 91       	ld	r18, Z+
 864:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 868:	8e 17       	cp	r24, r30
 86a:	9f 07       	cpc	r25, r31
 86c:	d1 f7       	brne	.-12     	; 0x862 <__vector_11+0x196>
 86e:	35 c0       	rjmp	.+106    	; 0x8da <__vector_11+0x20e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 870:	80 32       	cpi	r24, 0x20	; 32
 872:	a9 f4       	brne	.+42     	; 0x89e <__vector_11+0x1d2>
 874:	91 e2       	ldi	r25, 0x21	; 33
 876:	f9 12       	cpse	r15, r25
 878:	57 c0       	rjmp	.+174    	; 0x928 <__vector_11+0x25c>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 87a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 87e:	82 ff       	sbrs	r24, 2
 880:	fc cf       	rjmp	.-8      	; 0x87a <__vector_11+0x1ae>
 882:	e0 e0       	ldi	r30, 0x00	; 0
 884:	f1 e0       	ldi	r31, 0x01	; 1
 886:	87 e0       	ldi	r24, 0x07	; 7
 888:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 88a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 88e:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 890:	8e 17       	cp	r24, r30
 892:	9f 07       	cpc	r25, r31
 894:	d1 f7       	brne	.-12     	; 0x88a <__vector_11+0x1be>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 896:	8b ef       	ldi	r24, 0xFB	; 251
 898:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89c:	1e c0       	rjmp	.+60     	; 0x8da <__vector_11+0x20e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 89e:	82 32       	cpi	r24, 0x22	; 34
 8a0:	39 f4       	brne	.+14     	; 0x8b0 <__vector_11+0x1e4>
 8a2:	e1 e2       	ldi	r30, 0x21	; 33
 8a4:	fe 12       	cpse	r15, r30
			cdc_line_rtsdtr = wValue;
 8a6:	40 c0       	rjmp	.+128    	; 0x928 <__vector_11+0x25c>
 8a8:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__data_end>
			usb_wait_in_ready();
 8ac:	3c de       	rcall	.-904    	; 0x526 <usb_wait_in_ready>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 8ae:	15 c0       	rjmp	.+42     	; 0x8da <__vector_11+0x20e>
 8b0:	81 11       	cpse	r24, r1
			usb_wait_in_ready();
 8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <__vector_11+0x216>
 8b4:	38 de       	rcall	.-912    	; 0x526 <usb_wait_in_ready>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 8b6:	f2 e8       	ldi	r31, 0x82	; 130
 8b8:	ff 12       	cpse	r15, r31
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <__vector_11+0x204>
				UENUM = wIndex;
 8bc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 8c0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 8c4:	85 fb       	bst	r24, 5
 8c6:	88 27       	eor	r24, r24
 8c8:	80 f9       	bld	r24, 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 8ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__vector_11+0x206>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 8d0:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 8d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 8d6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8da:	8e ef       	ldi	r24, 0xFE	; 254
 8dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e0:	26 c0       	rjmp	.+76     	; 0x92e <__vector_11+0x262>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 8e2:	98 2f       	mov	r25, r24
 8e4:	9d 7f       	andi	r25, 0xFD	; 253
 8e6:	91 30       	cpi	r25, 0x01	; 1
 8e8:	f9 f4       	brne	.+62     	; 0x928 <__vector_11+0x25c>
		  && bmRequestType == 0x02 && wValue == 0) {
 8ea:	92 e0       	ldi	r25, 0x02	; 2
 8ec:	f9 12       	cpse	r15, r25
 8ee:	1c c0       	rjmp	.+56     	; 0x928 <__vector_11+0x25c>
 8f0:	01 2b       	or	r16, r17
 8f2:	d1 f4       	brne	.+52     	; 0x928 <__vector_11+0x25c>
			i = wIndex & 0x7F;
 8f4:	cf 77       	andi	r28, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 8f6:	9f ef       	ldi	r25, 0xFF	; 255
 8f8:	9c 0f       	add	r25, r28
 8fa:	94 30       	cpi	r25, 0x04	; 4
 8fc:	a8 f4       	brcc	.+42     	; 0x928 <__vector_11+0x25c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8fe:	9e ef       	ldi	r25, 0xFE	; 254
 900:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 904:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 908:	83 30       	cpi	r24, 0x03	; 3
 90a:	71 f0       	breq	.+28     	; 0x928 <__vector_11+0x25c>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 90c:	89 e1       	ldi	r24, 0x19	; 25
 90e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	01 c0       	rjmp	.+2      	; 0x91a <__vector_11+0x24e>
 918:	88 0f       	add	r24, r24
 91a:	ca 95       	dec	r28
 91c:	ea f7       	brpl	.-6      	; 0x918 <__vector_11+0x24c>
 91e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 922:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 926:	03 c0       	rjmp	.+6      	; 0x92e <__vector_11+0x262>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 928:	81 e2       	ldi	r24, 0x21	; 33
 92a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	bf 91       	pop	r27
 938:	af 91       	pop	r26
 93a:	9f 91       	pop	r25
 93c:	8f 91       	pop	r24
 93e:	7f 91       	pop	r23
 940:	6f 91       	pop	r22
 942:	5f 91       	pop	r21
 944:	4f 91       	pop	r20
 946:	3f 91       	pop	r19
 948:	2f 91       	pop	r18
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	ff 90       	pop	r15
 950:	0f 90       	pop	r0
 952:	0f be       	out	0x3f, r0	; 63
 954:	0f 90       	pop	r0
 956:	1f 90       	pop	r1
 958:	18 95       	reti

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
